
@using DigitalAV.Data
@inject NavigationManager UriHelper

<div class="top-row pl-4 navbar navbar-dark">
    <span id="book-name" class="navbar-brand">@GetBook()</span>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class='nav-link' @onclick='() => Navigate("/")' Match='NavLinkMatch.All'>  <!--using this instead of href forces reload to reset BookTitle-->
                <span class="oi oi-magnifying-glass" aria-hidden="true"></span> Search
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class='nav-link' @onclick='() => Navigate("/browse")'>                     <!--using this instead of href forces reload to reset BookTitle-->
                <span class="oi oi-bookmark" aria-hidden="true" style="margin-left:3px"></span> Browse
            </NavLink>
        </li>
        <li class="nav-item px-3">
            <NavLink class='nav-link' @onclick='() => Navigate("/summary")'>                    <!--using this instead of href forces reload to reset BookTitle-->
                <span class="oi oi-menu" aria-hidden="true"></span> Summary
            </NavLink>
        </li>
    </ul>
</div>

@code {
    private bool collapseNavMenu = true;
    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private string GetBook()
    {
        var parts = UriHelper.Uri.Split('#')[0].Split('?');
        if (parts.Length >= 2)
        {
            try
            {
                parts = parts[parts.Length - 1].Split('&');
                if (parts.Length >= 2)
                {
                    var bk = byte.Parse(parts[0]);
                    var ch = byte.Parse(parts[parts.Length - 1]);
                    return BibleSummaryData.GetBook(bk).name + " " + ch;
                }
                else
                {
                    var bk = byte.Parse(parts[0]);
                    return BibleSummaryData.GetBook(bk).name;
                }
            }
            catch
            {
                ;
            }
        }
        return "";
    }
    private void Navigate(string url)
    {
        UriHelper.NavigateTo(url, true);
    }
}
