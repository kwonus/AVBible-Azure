@page "/chapter"
@using DigitalAV
@using DigitalAV.Data
@using AVSDK
@using AVText

@inject NavigationManager UriHelper

<h1 hidden="hidden">@GetBookAndChapter()</h1>

<div style="overflow-y: scroll; word-break: break-word;">
    @for (var cursor = first; cursor <= last && GetWrit(cursor); cursor++)
    {
        @if (wref.bov)
        {
            <span id='@wref.vid' class='verse'><b><sup>@wref.vstr</sup></b> </span>
        }
        @if (wref.parenOpen)
        {
            <span>&nbsp;(</span>
        }
        @if (!wref.parenOpen)
        {
            <span>&nbsp;</span>
        }
        @if (wref.italics)
        {
            <em>
                @if (wref.jesus)
                {
                    <span class='@wref.wid' verse='verse' jesus='1'>@wref.lex</span>
                }
                @if (!wref.jesus)
                {
                    <span class='@wref.wid' verse='verse'>@wref.lex</span>
                }
            </em>
        }
        @if (!wref.italics)
        {
            @if (wref.jesus == true)
            {
                <span class='@wref.wid' verse='@wref.vid' jesus='1'>@wref.lex</span>
            }
            @if (wref.jesus != true)
            {
                <span class='@wref.wid' verse='@wref.vid'>@wref.lex</span>
            }
        }
        @if (wref.parenClose)
        {
            <span>)</span>
        }
        @if (wref.punc != null)
        {
            <span>@wref.punc</span>
        }
    }
</div>

@code
{
    private WritRef wref = null;
    private bool GetWrit(UInt32 cursor)
    {
        WritRef.Reset(ref wref);
        return wref.GetWrit(cursor);
    }
    private AVSDK.Book book;
    private UInt16 chapterIdx = 0;
    private AVSDK.Chapter chapter;
    private byte ch = 1;
    private UInt32 first = Startup.api.Chapters[0].writIdx;
    private UInt32 last = (UInt32)(Startup.api.Chapters[0].writIdx + Startup.api.Chapters[0].wordCnt - 1);

    private bool avx = false;

    string GetBookAndChapter()
    {
        var parts = UriHelper.Uri.Split('#')[0].Split('?');
        if (parts.Length >= 2)
        {
            try
            {
                parts = parts[parts.Length - 1].Split('&');
                if (parts.Length >= 2)
                {
                    var b = byte.Parse(parts[0]);
                    book = BibleSummaryData.GetBook(b);
                    ch = byte.Parse(parts[parts.Length - 1]);
                }
            }
            catch
            {
                ch = 1;
                book = BibleSummaryData.GetBook(1);
            }
        }
        chapter = Startup.api.Chapters[book.chapterIdx + ch - 1];
        first = chapter.writIdx;
        last = (UInt32)(first + chapter.wordCnt - 1);
        return book.name + " " + ch.ToString();

    }
}
